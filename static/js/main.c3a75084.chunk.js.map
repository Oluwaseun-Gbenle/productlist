{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","edit","products","editing","bind","axios","get","then","res","setState","data","console","log","this","className","id","class","map","product","i","editname1","name","editname2","contentEditable","editcat1","editcat2","editbar2","barcode","editbar1","editpri1","unit_cost_price","unit_selling_price","editpri2","editexp1","expiry_date","editexp2","editcre2","created_at","editcre1","key","src","image","alt","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6SA0GeA,G,wDApGX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACFC,MAAQ,CACXC,MAAK,EACRC,SAAU,IAEZ,EAAKC,QAAU,EAAKA,QAAQC,KAAb,gBANI,E,gEASE,IAAD,OAClBC,IAAMC,IAAI,qDACTC,MAAK,SAAAC,GAGJ,EAAKC,SAAS,CAAEP,SAAUM,EAAIE,OAC9BC,QAAQC,IAAI,EAAKZ,MAAME,e,gCAK5BW,KAAKJ,SAAS,CACZR,MAAOY,KAAKb,MAAMC,S,+BAIT,IAAD,OAET,OACA,yBAAKa,UAAU,aACf,yBAAKA,UAAW,WAChB,yBAAKA,UAAU,cACf,yBAAKA,UAAW,cAChB,yBAAKC,GAAI,cACT,8BAAM,uBAAGA,GAAG,WAAN,gBAAgC,4BAAQD,UAAU,QAAlB,oBACtC,2BAAOE,MAAM,QAAQD,GAAG,WACxB,+BACK,4BACA,iCACE,oCACA,wCACA,uCACA,uCACA,qCACA,2CACA,0CAKPF,KAAKb,MAAME,SAASe,KAAI,SAACC,EAAQC,GAC/B,IAAMC,EAAa,6BAAMF,EAAQG,MAC3BC,EAAa,yBAAKC,iBAAe,GAAEL,EAAQG,MAC3CG,EAAY,wBAAIV,UAAU,OAAd,qBACZW,EAAY,wBAAIX,UAAU,MAAKS,iBAAe,GAAlC,qBACZG,EAAU,wBAAIH,iBAAe,EAACT,UAAU,QAAQI,EAAQS,SACxDC,EAAU,wBAAId,UAAU,QAAQI,EAAQS,SACxCE,EAAU,wBAAIf,UAAU,OAAM,mCACpC,2BAAII,EAAQY,iBACZ,sCACA,2BAAIZ,EAAQa,qBAENC,EAAU,wBAAIlB,UAAU,OAAOS,iBAAe,GAAC,mCACrD,2BAAIL,EAAQY,iBACZ,sCACA,2BAAIZ,EAAQa,qBAEPE,EAAW,wBAAInB,UAAU,OAAd,IAAsBI,EAAQgB,YAA9B,KACXC,EAAW,wBAAIrB,UAAU,MAAMS,iBAAe,GAAnC,IAAsCL,EAAQgB,YAA9C,KACXE,EAAU,wBAAItB,UAAU,OAAOS,iBAAe,GAApC,IAAuCL,EAAQmB,WAA/C,KACVC,EAAU,wBAAIxB,UAAU,QAAd,IAAuBI,EAAQmB,WAA/B,KACf,OACF,2BAAOrB,MAAM,SACV,+BACD,wBAAIuB,IAAKpB,GACP,wBAAIL,UAAU,QAAQK,EAAE,GACxB,wBAAIL,UAAU,OACd,yBAAKA,UAAU,SAAS0B,IAAKtB,EAAQuB,MAAOC,IAAI,YAC1B,GAAnB,EAAK1C,MAAMC,KAAaqB,EAAUF,GAEjB,GAAnB,EAAKpB,MAAMC,KAAawB,EAASD,EACd,GAAnB,EAAKxB,MAAMC,KAAayB,EAASE,EAClC,wBAAId,UAAU,OAAM,4BAAQ6B,QAAS,EAAKxC,QAASW,UAAW,QAA1C,SACA,GAAnB,EAAKd,MAAMC,KAAa+B,EAASH,EACd,GAAnB,EAAK7B,MAAMC,KAAakC,EAASF,EACd,GAAnB,EAAKjC,MAAMC,KAAamC,EAASE,gB,GArFxBM,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACT,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD4H1B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjD,MAAK,SAAAkD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.c3a75084.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { Component } from \"react\";  \n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n       this.state = {\n         edit:false,\n      products: []\n    } \n    this.editing = this.editing.bind(this);\n      }\n   \n    componentDidMount() {\n      axios.get('https://striped-stripe-ulna.glitch.me/api/reorder')\n      .then(res => {\n      //  var newdata = Object.values(res.data)\n      // var newdata= Object.keys(res.data).map(i => res.data[i]);\n        this.setState({ products: res.data })\n        console.log(this.state.products)\n      })\n    }\n\n    editing(){\n   this.setState({\n     edit: !this.state.edit\n   })\n    }\n  \n     render(){\n      \n    return(\n    <div className='container'>\n    <div className= 'topbar'></div>\n    <div className='container1'>\n    <div className= 'container2'>\n    <div id= 'container3'>\n    <span><p id='subhead'>All Products</p><button className='btn2'>Add new product</button></span>\n    <table class=\"table\" id='heading'>\n    <thead>\n         <tr>\n         <th>#</th>\n           <th>Name</th>\n           <th>Category</th>\n           <th>Barcode</th>\n           <th>Actions</th>\n           <th>Price</th>\n           <th>Expiry date</th>\n           <th>Created</th>\n         </tr>\n       </thead>\n       </table>\n    {\n    this.state.products.map((product,i)=>{\n      const editname1 =  <div>{product.name}</div>\n      const editname2 =  <div contentEditable>{product.name}</div>\n      const editcat1=   <td className='adj'>FOOD AND BEVERAGE</td>\n      const editcat2=   <td className='adj'contentEditable>FOOD AND BEVERAGE</td>\n      const editbar2= <td contentEditable className='adj1'>{product.barcode}</td>\n      const editbar1= <td className='adj1'>{product.barcode}</td>\n      const editpri1= <td className='adj'><p>cost</p> \n      <p>{product.unit_cost_price}</p>\n      <p>selling</p>\n      <p>{product.unit_selling_price}</p>\n      </td>\n      const editpri2= <td className='adj2' contentEditable><p>cost</p> \n      <p>{product.unit_cost_price}</p>\n      <p>selling</p>\n      <p>{product.unit_selling_price}</p>\n      </td>\n     const editexp1=  <td className='adj'> {product.expiry_date} </td>\n     const editexp2=  <td className='adj' contentEditable> {product.expiry_date} </td>\n     const editcre2= <td className='adj1' contentEditable> {product.created_at} </td>\n     const editcre1= <td className='adj1'> {product.created_at} </td>\n      return(\n    <table class=\"table\">\n       <tbody>\n      <tr key={i}>\n        <td className='adj2'>{i+1}</td>\n        <td className='adj'>\n        <img className=\"adjimg\" src={product.image} alt=\"product\"/>\n          {this.state.edit == true?editname2:editname1}\n        </td>\n        {this.state.edit == true?editcat2:editcat1}\n        {this.state.edit == true?editbar2:editbar1}\n        <td className='adj'><button onClick={this.editing} className= 'btn1'>edit</button></td>\n        {this.state.edit == true?editpri2:editpri1}\n        {this.state.edit == true?editexp2:editexp1}\n        {this.state.edit == true?editcre2:editcre1}\n      </tr>\n      </tbody> \n   </table>\n     ) \n    })\n }                                                                                                                                                                                                                                                                                                                                                                                            \n   </div>\n   </div>\n   </div>\n   </div>\n  \n      )   \n}\n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n<App />,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}